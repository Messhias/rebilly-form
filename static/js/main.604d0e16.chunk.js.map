{"version":3,"sources":["components/Form.js","serviceWorker.js","index.js","App.js"],"names":["ApplicationForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","id","name","email","comments","token","phone","error","source","window","location","href","resume","fetchToken","bind","assertThisInitialized","mainInputChange","submitProcess","_mountResume","_this2","_this$state$id","interval","setInterval","clearInterval","event","preventDefault","_this$state","_this$state$name","_this$state$comments","_this$state$source","_this$state$phone","_this$state$email","_this$state$token","_this$state$id2","_this$state$resume","setState","sendData","JSON","stringify","posting","me","xhr","XMLHttpRequest","addEventListener","_this$responseText","responseText","console","log","parse","objectSpread","open","proxy","setRequestHeader","send","files","target","dataTransfer","defineProperty","value","file","_this3","reader","FileReader","onload","e","result","readAsDataURL","arguments","length","undefined","data","_this$responseText2","_this4","_this$state2","_this$state2$name","_this$state2$comments","_this$state2$source","_this$state2$phone","_this$state2$email","_this$state2$error","react_default","a","createElement","Container","Form","onSubmit","Row","Col","FormGroup","Label","for","Input","placeholder","type","onChange","required","Button","color","React","Component","Boolean","hostname","match","ReactDOM","render","Form_ApplicationForm","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.604d0e16.chunk.js","sourcesContent":["import React from 'react';\n\n// importing the default components\nimport Container from \"reactstrap/es/Container\";\nimport Form from \"reactstrap/es/Form\";\nimport Col from \"reactstrap/es/Col\";\nimport Row from \"reactstrap/es/Row\";\nimport FormGroup from \"reactstrap/es/FormGroup\";\nimport Input from \"reactstrap/es/Input\";\nimport Label from \"reactstrap/es/Label\";\nimport Button from \"reactstrap/es/Button\";\n\n/**\n * Default class signature.\n */\nexport default class ApplicationForm extends React.Component {\n    /**\n     * Default class constructor.\n     *\n     * @param props\n     * @return constructor.\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: 7, // here you change the ID according the application form sent by email.\n            name: \"\",\n            email: \"\",\n            comments: \"\",\n            token: \"\",\n            phone: \"\",\n            error: \"\",\n            source: window.location.href,\n            resume: null,\n        };\n\n        // binding the default components functions.\n        this.fetchToken = this.fetchToken.bind(this);\n        this.mainInputChange = this.mainInputChange.bind(this);\n        this.submitProcess = this.submitProcess.bind(this);\n        this._mountResume = this._mountResume.bind(this);\n    }\n\n    /**\n     * Default react life cycle component.\n     *\n     * @return void\n     */\n    componentWillMount() {\n        const { id = null } = this.state;\n        this.fetchToken(id);\n        // setting interval of 5 minutes to refresh the token\n        this.interval = setInterval(() => this.fetchToken(id), 300000);\n    }\n\n    /**\n     * Default react life cycle function.\n     *\n     * @return void\n     */\n    componentWillUnmount() {\n        // removing the interval after the component destruction.\n        clearInterval(this.interval);\n    }\n\n    /**\n     * Start the submit process.\n     *\n     * @param event\n     * @return void\n     */\n    submitProcess(event) {\n        event.preventDefault();\n        const {\n            name = \"\",\n            comments = \"\",\n            source = window.location.href,\n            phone = \"\",\n            email = \"\",\n            token = \"\",\n            id = null,\n            resume = null,\n        } = this.state;\n        this.setState({ error: \"\" });\n\n        if (token === \"\") this.fetchToken(id);\n\n        if (email === \"\" || name === \"\" || resume === \"\") {\n            this.setState({ error: \"Fill all the fileds\" });\n        } else {\n            // collect the inputs data\n            const sendData = JSON.stringify({\n                name,\n                comments,\n                source,\n                phone,\n                email,\n                token,\n                posting: id,\n                resume,\n            });\n            const me = this;\n\n            // mount the url with the proxy\n            const myUrl = 'https://app.applybyapi.com/apply/';\n            const proxy = 'https://cors-anywhere.herokuapp.com/';\n            const xhr = new XMLHttpRequest();\n\n\n            xhr.addEventListener(\"load\", function () {\n                let { responseText = \"\" } = this;\n\n                console.log(this);\n                if (responseText !== \"\") {\n                    responseText = JSON.parse(responseText);\n                    // spread the response text in the state.\n                    me.setState({ ...responseText });\n                }\n            });\n            // Or post, etc\n            xhr.open(\"POST\", proxy + myUrl);\n\n\n            xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data\");\n            xhr.setRequestHeader(\"Accept\", \"*/*\");\n            xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n            xhr.setRequestHeader(\"Postman-Token\", \"e11ed90e-b897-4d3a-a112-2ff2b6475c12,dde1fca5-917b-43d2-b70e-c6d0c132476b\");\n            xhr.setRequestHeader(\"cache-control\", \"no-cache\");\n\n            xhr.send(sendData);\n        }\n    }\n\n    /**\n     * Update the state of the inputs.\n     *\n     * @param event\n     * @return void\n     */\n    mainInputChange(event) {\n        let files = null;\n        if (event.target) {\n            files = event.target.files;\n        } else if (event.dataTransfer) {\n            files = event.dataTransfer.files;\n        }\n        if (!files) this.setState({ [event.target.name]: event.target.value });\n        else this._mountResume(files[0]);\n    }\n\n    /**\n     * Create file data.\n     *\n     * @param file\n     * @private\n     */\n    _mountResume(file) {\n        let reader = new FileReader();\n        reader.onload = (e) => {\n            this.setState({\n                resume: e.target.result\n            })\n        };\n        reader.readAsDataURL(file);\n    }\n\n    /**\n     * Fetch Token API.\n     *\n     * @param posting\n     * @return void\n     */\n    fetchToken(posting = null) {\n        // mount the api data.\n        const data = JSON.stringify({\n            \"posting\": 7\n        });\n        const me = this;\n\n        // mount the url with the proxy\n        const myUrl = 'https://app.applybyapi.com/gentoken/';\n        const proxy = 'https://cors-anywhere.herokuapp.com/';\n        const xhr = new XMLHttpRequest();\n\n\n        xhr.addEventListener(\"load\", function () {\n            let { responseText = \"\" } = this;\n            if (responseText !== \"\") {\n                responseText = JSON.parse(responseText);\n                // spread the response text in the state.\n                me.setState({ ...responseText });\n            }\n        });\n        // Or post, etc\n        xhr.open(\"POST\", proxy + myUrl);\n\n\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.setRequestHeader(\"Accept\", \"*/*\");\n        xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n        xhr.setRequestHeader(\"Postman-Token\", \"e11ed90e-b897-4d3a-a112-2ff2b6475c12,dde1fca5-917b-43d2-b70e-c6d0c132476b\");\n        xhr.setRequestHeader(\"cache-control\", \"no-cache\");\n\n        xhr.send(data);\n    }\n\n    /**\n     * Default render function.\n     *\n     * @return {*}\n     */\n    render() {\n        const {\n            name = \"\",\n            comments = \"\",\n            source = window.location.href,\n            phone = \"\",\n            email = \"\",\n            error = \"\",\n        } = this.state;\n\n        return (\n            <Container>\n                <h3>\n                    Welcome to Rebilly application form.\n                </h3>\n                <Form\n                    onSubmit={event => this.submitProcess(event)}\n                >\n                    <Row>\n                        <Col>\n                            <FormGroup>\n                                <Label for={'name'}>\n                                    Name\n                                </Label>\n                                <Input\n                                    placeholder={'Your full name.'}\n                                    type={'text'}\n                                    name={'name'}\n                                    id={'name'}\n                                    value={name}\n                                    onChange={event => this.mainInputChange(event)}\n                                    required\n                                />\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <FormGroup>\n                                <Label for={'email'}>\n                                    Email\n                                </Label>\n                                <Input\n                                    type={'text'}\n                                    name={'email'}\n                                    id={'email'}\n                                    value={email}\n                                    onChange={event => this.mainInputChange(event)}\n                                    placeholder={\"your@email.com\"}\n                                    required\n                                />\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <FormGroup>\n                                <Label for={'resume'}>\n                                    Resume\n                                </Label>\n                                <Input\n                                    type={'file'}\n                                    name={'resume'}\n                                    id={'resume'}\n                                    onChange={event => this.mainInputChange(event)}\n                                    required\n                                />\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <FormGroup>\n                                <Label for={'phone'}>\n                                    Phone\n                                </Label>\n                                <Input\n                                    type={'text'}\n                                    name={'phone'}\n                                    id={'phone'}\n                                    value={phone}\n                                    placeholder={\"(xx) xxxx-xxx\"}\n                                    onChange={event => this.mainInputChange(event)}\n                                />\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <FormGroup>\n                                <Label for={'source'}>\n                                    Source\n                                </Label>\n                                <Input\n                                    type={'text'}\n                                    name={'source'}\n                                    id={'source'}\n                                    value={source}\n                                    placeholder={'Source of submission.'}\n                                    onChange={event => this.mainInputChange(event)}\n                                />\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <FormGroup>\n                                <Label for={'comments'}>\n                                    Comments\n                                </Label>\n                                <Input\n                                    type={'textarea'}\n                                    name={'comments'}\n                                    id={'comments'}\n                                    value={comments}\n                                    onChange={event => this.mainInputChange(event)}\n                                    placeholder={'Type a nice comment.'}\n                                />\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <FormGroup>\n                                <Button\n                                    color={'primary'}\n                                >\n                                    Submit\n                                </Button>\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                </Form>\n                <Row>\n                    <Col>\n                        <p>\n                            {error}\n                        </p>\n                    </Col>\n                </Row>\n                <Row>\n                    <p>\n                        <a href={'https://github.com/meshsias'}>Fabio William Conceição</a>\n                    </p>\n                </Row>\n            </Container>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './styles/scss/main.scss';\n\n// importing the main component.\nimport Form from './components/Form';\n\n/**\n * Exporting the default main application.\n *\n * @return {*}\n */\nexport default () => <Form  />\n"],"sourceRoot":""}