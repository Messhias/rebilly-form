{"version":3,"sources":["Components/Form.js","serviceWorker.js","index.js","App.js"],"names":["ApplicationForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","id","name","email","comments","token","resume","fetchToken","bind","assertThisInitialized","_this$state$id","arguments","length","undefined","data","JSON","stringify","posting","xhr","XMLHttpRequest","withCredentials","addEventListener","readyState","console","log","responseText","open","setRequestHeader","send","react_default","a","createElement","Container","Form","className","Row","Col","FormGroup","Label","Input","type","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","Form_ApplicationForm","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wUAeqBA,cAMjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,GAAI,EACJC,KAAM,GACNC,MAAO,GACPC,SAAU,GACVC,MAAO,GACPC,OAAQ,MAIZb,EAAKc,WAAad,EAAKc,WAAWC,KAAhBd,OAAAe,EAAA,EAAAf,CAAAD,IAZHA,oFAeE,IAAAiB,EACKd,KAAKI,MAAnBC,UADS,IAAAS,EACJ,KADIA,EAGjBd,KAAKW,WAAWN,wCAGCU,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,OAEbG,EAAOC,KAAKC,UAAU,CACtBC,QAAW,IAGXC,EAAM,IAAIC,eACdD,EAAIE,iBAAkB,EAEtBF,EAAIG,iBAAiB,mBAAoB,WACb,IAApBzB,KAAK0B,YACLC,QAAQC,IAAI5B,KAAK6B,gBAIzBP,EAAIQ,KAAK,OAAQ,wCACjBR,EAAIS,iBAAiB,eAAgB,oBACrCT,EAAIS,iBAAiB,gBAAiB,YACtCT,EAAIS,iBAAiB,gBAAiB,wCAEtCT,EAAIU,KAAKd,oCAIT,OACIe,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAAA,kDAGAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,UAAW,WACbL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACIN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACIP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACO,EAAA,EAAD,aAGAT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACIC,KAAM,OACNtC,KAAM,OACND,GAAI,OACJwC,MAAO,QAKvBZ,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACIN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACIP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACO,EAAA,EAAD,aAGAT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACIC,KAAM,OACNtC,KAAM,OACND,GAAI,OACJwC,MAAO,QAKvBZ,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACIN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACIP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACO,EAAA,EAAD,aAGAT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACIC,KAAM,OACNtC,KAAM,OACND,GAAI,OACJwC,MAAO,iBAjGEC,IAAMC,WCH/BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cCED,kBAAMF,EAAAC,EAAAC,cAACoB,EAAD,ODFL,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.82bdfb74.chunk.js","sourcesContent":["import React from 'react';\n\n// importing the default components\nimport Container from \"reactstrap/es/Container\";\nimport Form from \"reactstrap/es/Form\";\nimport Col from \"reactstrap/es/Col\";\nimport Row from \"reactstrap/es/Row\";\nimport FormGroup from \"reactstrap/es/FormGroup\";\nimport Input from \"reactstrap/es/Input\";\nimport Label from \"reactstrap/es/Label\";\n\n\n/**\n * Default class signature.\n */\nexport default class ApplicationForm extends React.Component {\n    /**\n     * Default class constructor.\n     *\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: 7, // here you change the ID according the application form sent by email.\n            name: \"\",\n            email: \"\",\n            comments: \"\",\n            token: \"\",\n            resume: null,\n        };\n\n        // binding the default components functions.\n        this.fetchToken = this.fetchToken.bind(this);\n    }\n\n    componentWillMount() {\n        const { id = null } = this.state;\n\n        this.fetchToken(id);\n    }\n\n    fetchToken(id= null) {\n        // collect the form data while iterating over the inputs\n        var data = JSON.stringify({\n            \"posting\": 7\n        });\n\n        var xhr = new XMLHttpRequest();\n        xhr.withCredentials = true;\n\n        xhr.addEventListener(\"readystatechange\", function () {\n            if (this.readyState === 4) {\n                console.log(this.responseText);\n            }\n        });\n\n        xhr.open(\"POST\", \"https://app.applybyapi.com/gentoken/\");\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.setRequestHeader(\"cache-control\", \"no-cache\");\n        xhr.setRequestHeader(\"Postman-Token\", \"385955f3-3ab0-45eb-a5b8-ba09e99b5654\");\n\n        xhr.send(data);\n    }\n\n    render() {\n        return (\n            <Container>\n                <h3>\n                    Welcome to redilly application form.\n                </h3>\n                <Form className={'my-form'}>\n                    <Row>\n                        <Col>\n                            <FormGroup>\n                                <Label>\n                                    Name\n                                </Label>\n                                <Input\n                                    type={'text'}\n                                    name={'name'}\n                                    id={'name'}\n                                    value={''}\n                                />\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <FormGroup>\n                                <Label>\n                                    Name\n                                </Label>\n                                <Input\n                                    type={'text'}\n                                    name={'name'}\n                                    id={'name'}\n                                    value={''}\n                                />\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <FormGroup>\n                                <Label>\n                                    Name\n                                </Label>\n                                <Input\n                                    type={'text'}\n                                    name={'name'}\n                                    id={'name'}\n                                    value={''}\n                                />\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\nimport './styles/scss/main.scss';\n\n// importing the main component.\nimport Form from './Components/Form';\n\n\nexport default () => <Form  />\n"],"sourceRoot":""}